<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Context Manager</title>
    <link rel="stylesheet" href="<%= cssUri %>">
</head>

<body>
    <div class="container">

        <h1>Welcome to AI Context Manager!</h1>
        <button id="indexButton">Index</button>
        <button id="toggleTreeViewButton">Toggle Tree View</button>

        <div id="treeView" class="tree-view">
            <% treeData.forEach((item, index)=> { %>
                <div class="tree-item">
                    <div class="tree-item-header">
                        <input type="checkbox" id="enable-<%= index %>" <%=item.enabled ? 'checked' : '' %>>
                        <span class="toggle-btn" data-id="<%= index %>">▶</span>
                        <label for="enable-<%= index %>">
                            <%= item.title %>
                        </label>
                        <span class="token-count">(~<%= item.tokenCount %> tokens)</span>
                        <span class="remove-btn" data-id="<%= index %>">❌</span>
                    </div>
                    <div class="tree-item-content" id="content-<%= index %>" style="display: none;">
                        <% item.children.forEach(child=> { %>
                            <div>
                                <%= child %>
                            </div>
                            <% }) %>
                    </div>
                </div>
                <% }) %>
        </div>

        <!-- Text output area -->
        <div id="outputArea" class="output-area"></div>
    </div>

    <!-- Chat bar at the bottom -->
    <div class="chat-bar">
        <input type="text" id="chatInput" placeholder="Type a message...">
        <button id="sendButton">Send</button>
    </div>

    <script>
        const vscode = acquireVsCodeApi();
        document.getElementById('indexButton').addEventListener('click', () => {
            vscode.postMessage({ command: 'index' });
        });

        document.getElementById('toggleTreeViewButton').addEventListener('click', () => {
            const treeView = document.getElementById('treeView');
            if (treeView.style.display === 'none') {
                treeView.style.display = 'block';
            } else {
                treeView.style.display = 'none';
            }
            adjustOutputArea();
        });

        document.querySelectorAll('.tree-item-header input[type="checkbox"]').forEach(checkbox => {
            checkbox.addEventListener('change', (e) => {
                const itemId = e.target.id.split('-')[1];
                vscode.postMessage({ command: 'toggleItem', itemId: itemId, enabled: e.target.checked });
            });
        });

        document.querySelectorAll('.remove-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const itemId = e.target.getAttribute('data-id');
                vscode.postMessage({ command: 'removeItem', itemId: itemId });
            });
        });

        document.querySelectorAll('.toggle-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const itemId = e.target.getAttribute('data-id');
                const content = document.getElementById(`content-${itemId}`);
                if (content.style.display === 'none') {
                    content.style.display = 'block';
                    e.target.textContent = '▼';
                } else {
                    content.style.display = 'none';
                    e.target.textContent = '▶';
                }
            });
        });

        document.getElementById('sendButton').addEventListener('click', () => {
            const input = document.getElementById('chatInput');
            vscode.postMessage({ command: 'sendMessage', text: input.value });
            input.value = '';
        });

        document.getElementById('chatInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                const input = document.getElementById('chatInput');
                vscode.postMessage({ command: 'sendMessage', text: input.value });
                input.value = '';
            }
        });

        // Handle messages sent from the extension
        window.addEventListener('message', event => {
            const message = event.data;
            switch (message.command) {
                case 'outputText':
                    const outputArea = document.getElementById('outputArea');
                    outputArea.textContent += message.text + '\n';
                    outputArea.scrollTop = outputArea.scrollHeight; // Scroll to the bottom
                    break;
            }
        });

        function adjustOutputArea() {
            const treeView = document.getElementById('treeView');
            const outputArea = document.getElementById('outputArea');
            if (treeView.style.display === 'none') {
                outputArea.style.height = 'calc(100% - 50px)'; // Adjust height accordingly
            } else {
                outputArea.style.height = 'calc(100% - 250px)'; // Adjust height accordingly
            }
        }

        window.addEventListener('resize', adjustOutputArea);
        adjustOutputArea(); // Initial call
    </script>
</body>

</html>